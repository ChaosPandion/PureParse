

open PureParse;
open PureParse.Examples

open System
open System.IO
open System.Linq
open System.Diagnostics


(*
let accept tree = 

    EventTree.writeHtml tree ""

    ()

//let json = " [ 1, 2, 3, 4, [ true, false, null, [ 1, 2, 3, 4, 5, 6, 8, \"\\uaa1\"  ] ] ] "
let json = System.IO.File.ReadAllText ("")
match tryRun Json.parser json () with
| RunSuccess(state, data, tree) ->
    accept tree
    printfn "Success"
    System.Console.ReadLine() 
    |> ignore
| RunFailure(state, error, tree) ->
    accept tree
    let d = EventTree.getDeepestFailure tree
    let x = error.Message
    System.Console.WriteLine (d)
    printfn "Failure"
    System.Console.ReadLine() 
    |> ignore


let words = [ "true"; "false"; "null"; "nullish"; "nullite"; "nullate"; "trukish"; "then"; "thenling" ]
let pairs = Seq.allPairs words words |> Seq.toList
let substrings = 
    pairs 
    |> Seq.map (
        fun (x, y) -> 
            let length =
                Seq.init (min x.Length y.Length) (fun i -> i) 
                |> Seq.skipWhile (fun i -> x[i] = y[i]) 
                |> Seq.tryHead 
                |> Option.defaultValue 0
            if length > 0 then x.Substring(0, length) else "")
let z = 
        seq {
            for x in words do
                for y in words do
                    let mutable i = 0
                    while i < x.Length && i < y.Length && x[i] = y[i] do 
                        i <- i + 1
                    if i > 0 then
                        yield y, x.Substring(0, i) 
        }
        |> Seq.groupBy (fun (a,c) -> c)
        |> Seq.map (fun (x, y) -> x, y |> Seq.toList)
        |> Seq.filter (fun (x, y) -> y.Length > 1)
        |> Seq.map (fun (x, y) -> x, y |> Seq.distinct |> Seq.map fst |> List.ofSeq)
        |> Seq.sortByDescending (fun (x,y) -> x.Length)
        |> List.ofSeq
        
let wordsWithPrefix = z |> Seq.collect (fun (x,y) -> y)
let wordsWithoutPrefix = words |> Seq.except wordsWithPrefix
*)

(*
let y = 
    Seq.init (700000) (fun i -> $"""{i}{if i < 699999 then "," else ""}""") 
    |> Seq.fold (fun (sb:System.Text.StringBuilder) s -> sb.Append(s)) (System.Text.StringBuilder())
let s = "[" + y.ToString()  + "]"
let x = Json.parseText s
*)
(*
type UnaryOps =
    | Uplus 
    | Uminus
type BinaryOps = 
    | Plus 
    | Sub 
    | Mult 
    | Div
type TermMode = 
    | Grouped 
    | Ungrouped
type NumMode = 
    | Int 
    | Float 
    | Scientific

type Exp =    
    | Number of double * NumMode
    | Group of Exp
    | UnaryPlus of Exp
    | UnaryMinus of Exp
    | Add of Exp * Exp
    | Subtract of Exp * Exp
    | Multiply of Exp * Exp
    | Divide of Exp * Exp

let unaryOps = [| Uplus; Uminus; |]
let binaryOps = [| Plus; Sub; Mult; Div; |]
let termMode = [| Grouped; Ungrouped; |]
let numMode = [| Int; Float; Scientific; |]
let random = Random()

let generateNumber () =
    let mode = numMode[random.Next(0, 3)]
    let n = random.NextDouble() * 100.0
    Number(Math.Round(n, 3), mode)

let rec generateExpression ops depth =
    begin
        let mode = binaryOps[random.Next(0, 4)]
        let e1Mode = termMode[random.Next(0, 2)]
        let e2Mode = termMode[random.Next(0, 2)]

        let buildTerm = function
            | Grouped -> Group (if depth > 0 then generateExpression (random.Next(1, 4)) (depth - 1) else generateNumber ())
            | Ungrouped -> generateNumber ()

        match mode with
        | Plus -> Add (buildTerm e1Mode, if ops > 0 then generateExpression (ops - 1) (depth) else buildTerm e2Mode)
        | Sub -> Subtract (buildTerm e1Mode, if ops > 0 then generateExpression (ops - 1) (depth) else buildTerm e2Mode)
        | Mult -> Multiply (buildTerm e1Mode, if ops > 0 then generateExpression (ops - 1) (depth) else buildTerm e2Mode)
        | Div -> Divide (buildTerm e1Mode, if ops > 0 then generateExpression (ops - 1) (depth) else buildTerm e2Mode)
    end

let rec toString = function
    | Number (d, m) -> $"""{d.ToString("F3")}"""
        //match m with
        //| Int -> $"""{d.ToString("G")}"""
        //| Float -> $"""{d.ToString("F")}"""
        //| Scientific -> $"""{d.ToString("e")}""" 
    | Group e -> $"({toString e})"
    | UnaryPlus e -> $"+{toString e}"
    | UnaryMinus e -> $"-{toString e}"
    | Add (x, y) -> $"{toString x} + {toString y}"
    | Subtract (x, y) -> $"{toString x} - {toString y}"
    | Multiply (x, y) -> $"{toString x} * {toString y}"
    | Divide (x, y) -> $"{toString x} / {toString y}"


open PureParse.Examples.Arithmetic

let expressions = ResizeArray<Exp * string * string>()
for i = 0 to 300 do
    let e = generateExpression 4 2
    let s = toString e
    let x = $"""[| "{s}":>obj; ({s}):>obj |]"""
    expressions.Add ((e, s, x))

let n = System.String.Join ("\n", expressions |> Seq.map (fun (x, y, z) -> z))


let z = (3946.7001766462 + ((((8120.4882593958 - 6169.6207432223 - 6552.632586911) + (1866.5782821349 / 3614.5095518271 + (802.1323725853)) - 3298.126613334) - (((3275.516334208) + (2733.7686553684) / 7228.2311085437) / ((5003.1716032155) * (855.04092115) * (1092.0702403673)) * 3174.288467435) - (6291.5940367672 / ((5383.4673677569) / 8734.7807532083 + (7143.741065358)) * ((3810.2440360426) - 2595.3943077391 * (7177.0448467373)))) + ((((4937.0960846812) * (4300.7295530695) + 7261.7587632068) * 3278.8846066601 - 5670.9044538914) + (3746.7884204693 - 1959.9203738664 / ((9464.3185935337) - (1107.1550215837) / 4247.0112391616)) - 1011.9089549039) + ((5051.170306093 * 8655.2105717248 * ((2994.3676847082) - (3851.0767513472) * (3430.5801762589))) - (6543.8723566229 * 605.098340458 / ((4885.292620808) * (158.6776511392) - (1387.4441966815))) * (((7073.2641872324) / (4051.7596422762) * (8299.1314791868)) + 2648.6014590335 + 6632.605789263))) / (8971.8643460138 + (8865.4968476832 - (5121.8230715619 * 6181.1509897335 + (1522.1776773916 / 9107.1592695115 + 1688.3141228741)) * (1581.9834307551 / 7939.5977412139 / ((8908.8139851282) / 2002.2326471682 + 8423.1954769439))) / 2668.2132851253)) + ((6573.2218504475 * 4466.6543967193 - (5566.1972542172 / (1210.9383823299 / 6683.0723441403 + (9665.0499313164 * (4020.1893169692) - 5896.6995031367)) * 9466.8193388449)) * (8634.3954476326 / 1706.8817954443 * 6876.4435039482) / 7602.3712806747) - 1183.2717173829 - 4861.981004647 * (4830.1295477534 + 1435.3538839791 + ((561.6538695532 * ((7708.3174664601 * 5840.3766093212 - (4268.7409086869)) / 2313.8134922672 + 3706.0319099756) * 3045.9479412418) - (5314.9978719094 + 8473.7709416395 / (8333.0750293599 * (6064.9783306368 + (9319.5322356956) + 2967.9683091157) / 8407.6901654826)) - 4400.6976598041)) / 1348.7788427978 / 5388.1838535701 * 9283.1332311346 * 3972.5557818703 / 1200.0047103232 / 6102.2673592964 - (1566.6202709044 * (((9531.8334996975 * 4548.6217529858 * 7082.6762345511) - 8568.3625568669 * (((8395.8297859633) - 8971.4538195582 * 7664.6040940022) + (6044.5035616739 * (140.1149022244) + 6073.61450999) + ((5177.0685804327) + 9918.0946724703 - (4041.5055696575)))) * (4713.1475636041 / (((7143.8295299739) / (924.7783350983) - (9534.7334250251)) * (5429.5258613148 / 1531.2505291663 - (5081.0170223803)) - ((8773.7874643069) / 6108.2377387704 / 4118.3590512981)) - 8871.4789067256) - 6031.7376226124) - (8638.838454038 - 2553.2180055167 / ((788.7612040452 / 2018.2783454258 + ((5676.9302592916) + (5509.5732100017) * (5490.3403862787))) - 7020.6963456205 / ((7523.1119656863 / (2889.3853294706) / (7383.333209633)) / (5205.6946863947 * (2563.6645734206) - (3599.2596856852)) - 2723.5734790318)))) / 3991.6887621284 - ((((8286.1638598899 - 4748.4253215691 / 7730.5090539862) - 7698.1240818252 + 8564.165263094) + (2376.976686128 * 7857.2885255884 + (4420.4722307712 * 962.4011761695 * 7774.6879456131)) * 2133.2839240899) - 2024.5441477778 - 8892.8147349606) * (4520.2733648775 - (((7166.1682486615 / ((2209.4265354654) - 5738.021487296 + 3456.9510875713) * ((9000.7564307459) * (2320.581758391) - (633.8705796714))) - (7168.0593040549 * ((9229.3026319328) * 8036.0649744323 - 2689.869865148) / 8297.5316602651) + 534.4990236461) / ((8826.4611002008 * (1118.6490076396 * (7243.51425241) + (257.4080554642)) + 7411.2740076727) + 743.6576846588 / 2439.8182260677) * 3988.8431395632) / 2728.3607065644) + (((4076.0997962848 / 901.9494268062 - ((8250.2501404857 + 4686.2676949202 * 1598.6304403316) * 3983.1202756845 + ((8045.0280223079) + (6300.8832100868) - 4942.4434014586))) / (3652.4775684835 + (4158.9611364168 / 247.2539674109 - (3086.3877920193 * 1497.9017342364 + (7242.9537405236))) + 939.2785883001) / ((((9252.2625305396) / 1510.5369730862 / (3385.714872628)) - ((8677.8538354323) + 7893.0884514953 / 8304.0545510414) - ((6430.2428212323) - (9738.7472432602) + (6874.0652990643))) * 4706.904287697 - (4559.0367181342 + 9762.1676596835 - (3064.6586687855 - (3588.0281744604) - 8007.3479185492)))) / 7683.4854489701 / (((6400.632288167 + ((3190.3667987868) - 9882.2981985069 + (8125.7408296331)) * ((2485.4031036772) - (7593.790149127) - (4350.5465565633))) - ((789.3480859574 + 6941.3501644047 - (2131.1677379786)) * ((153.4408728148) - 812.8515584921 * (8583.1245760842)) * (7535.703127052 + 3281.5554099662 * (7621.9552296173))) + ((4109.8491802996 / (1649.0682985988) * (8222.9707659614)) * (3251.0627170383 - (7804.3282710714) / 1749.1511941002) - 5625.9065722335)) / (6880.2255285878 - (5833.1872164844 + (523.4167359498 / 5211.5680417505 / (9054.005368804)) / ((5412.5365125199) * (9363.0273490396) + (750.1736557345))) - 123.5711623584) - (((8973.7830667135 / (8947.9738031481) * (1155.8806741614)) - (3149.8600507758 - 4460.4708126653 / (7456.9025926827)) / 2719.7287931833) / 7582.4749391962 * (2088.1807973673 / 9687.7278229041 + (3455.5732509938 * 4236.8185557288 / (1002.8405454322)))))) - (4280.8071556684 - 1019.3550143921 * (570.1412433597 / 6888.1455692728 + 375.2123827819)) / (5211.7554271466 * 1248.271112827 + 1625.7516072816) * (((6733.7125982264 - ((1400.9660255319 / (5655.8482181144) - (2695.5362395298)) * 1919.9861915512 + ((76.1220936487) - 7014.3399848594 * (1076.4375118161))) / 6381.5121642488) * (8526.3699529599 * 853.3604440272 - (8602.6756432059 - ((4159.7411740227) + (9222.8745555459) / 7329.6679487005) * 6473.0881506442)) + 8812.9429283323) + ((2826.9417257367 * 1744.2985721137 + (1465.04530097 - ((6345.1174289345) / 6482.4583019853 * (1158.6211199706)) + 8783.9597224682)) + 6919.362189369 + (((7825.4815950513 * (5270.3476884491) / (2149.6533611062)) + ((1689.0883113986) + (3618.3962489229) + 3481.597814617) / (3418.8384492415 * (9470.0636953315) + (6706.6224751758))) + (((5537.2117548052) + (9599.1842223711) * 8095.2429242605) / (3922.8639582833 + 1676.3124846263 * (6841.5547272792)) / 9637.4611626264) - 1129.4649724268)) - 5882.0007692276) + 5233.3056217104 - 8913.7847871792 * 5292.3667775699
*)

let st = TextStream.Create ((), "100")
let x = parseReal<unit, double> ()
let r = x st

System.Console.ReadKey(true) 
|> ignore